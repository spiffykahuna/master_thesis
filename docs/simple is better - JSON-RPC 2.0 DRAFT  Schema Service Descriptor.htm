<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>simple is better - JSON-RPC 2.0 DRAFT: Schema Service Descriptor</title>

    <meta name="keywords" content="simple RPC, JSON, json-rpc, JSON-RPC 2.0, HTTP">
    <meta name="author" content="Roland Koebler">
    <meta name="language" content="en">
    <meta name="robots" content="all">
    <!-- http://www.simple-is-better.org -->

    <style type="text/css">
	body  { background-color: #CCBC59; max-width: 65em; margin: 1em auto; padding-left: 1ex; padding-right: 1ex; font-family: Helvetica,Arial,sans-serif; font-size: 90%; }
	blockquote#header { font-family: serif }
	#main { background-color: #FFFFFF; border-top-style: groove; border-bottom-style: ridge; padding-left: 1em; padding-right: 1em }
	#footer_img { text-align: right }
	h1 a     { color: #000000; text-decoration: none }
	h1.title { background-color: #FFEC70; text-align: center; margin-left: 1em; margin-right: 1em; }
	h2,h3,h4,h5 { background-color: #FFFC90; }
	h3 { text-decoration: underline }
	table.docinfo  { margin: 0em 2em; text-align: left; }
	table.footnote { border-left: 1px solid black; margin-left: 1px; font-size: small }
	table.field-list { text-align: left; margin-bottom: 1ex; }
	table.border td, table.border th { border: 1px solid black; padding: 0.25ex 0.5ex; }
	.pre  { background-color: #EEEEEE; font-family: monospace; }
	tt    { background-color: #EEEEEE; font-family: monospace; }
	pre   { background-color: #EEEEEE; margin-left: 2em; margin-right: 2em; overflow: auto; }
	table { background-color: #FFFFFF; border-collapse: collapse; border-color: #808080; }
    </style>
</head>
<body>

<h1><a href="http://www.simple-is-better.org/index.html">simple is better</a></h1>



<div id="main">
<div class="document" id="draft-json-schema-service-descriptor">
<h1 class="title">DRAFT: JSON Schema Service Descriptor</h1>
<table class="docinfo" frame="void" rules="none">
<colgroup><col class="docinfo-name">
<col class="docinfo-content">
</colgroup><tbody valign="top">
<tr><th class="docinfo-name">Author:</th>
<td>?</td></tr>
</tbody>
</table>
<p>By including method definitions, <a class="reference external" href="http://www.json.com/json-schema-proposal/">JSON Schema</a> can easily be extended to be a
service descriptor for the RPC (remote procedure call) service JSON-RPC. JSON
Schema provides robust type definition which can be utilized for defining types
in method call contracts. In addition, using JSON Schema allows methods to be
defined in the same manner as property definitions, so direct object/REST and
RPC services can be defined in a uniform manner, and services can even support
both direct object and RPC services.</p>
<p>A JSON Schema service descriptor is simply a JSON Schema with the additional
definition for methods. For this specification, a schema will be used to denote
a JSON Schema definition. A JSON Schema service descriptor is an JSON object
with properties that correspond to available methods or procedures that can be
called, and the values of the properties in the schema should contain a method
definitions that provide the definition for how the methods should be called.
A method definition can define various attributes of the method that define
it's usage and valid values. A method definition follows the same format as a
JSON Schema <a class="reference external" href="http://www.json.com/json-schema-proposal/#propertyDefinition">property definition</a> except, that the type value must be
"method", the property attributes describe the return value, and there are
additional attributes "returns" which describes the <a class="reference external" href="http://www.json.com/json-schema-proposal/#typeDefinition">type</a> of the return
value, and "params" which is an array of <a class="reference external" href="http://www.json.com/json-schema-proposal/#propertyDefinition">property definition</a>s (or possibly an
object if 1.1 supports objects as params). Here are the properties that are in
addition to the standard JSON Schema <a class="reference external" href="http://www.json.com/json-schema-proposal/#propertyDefinition">property definition</a>:</p>
<table class="docutils">
<colgroup>
<col width="3%">
<col width="97%">
</colgroup>
<thead valign="bottom">
<tr><th class="head">Property</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>type</td>
<td>Must be "method" for a method definition.</td>
</tr>
<tr><td>returns</td>
<td>Must be a <a class="reference external" href="http://www.json.com/json-schema-proposal/#typeDefinition">type</a> definition. If it is not included, the return value is not needed, the method should be considered a notification.</td>
</tr>
<tr><td>params</td>
<td>Must be an array of <a class="reference external" href="http://www.json.com/json-schema-proposal/#propertyDefinition">property definition</a>s.
 Each property definition should also have a name property to define the
 name of parameters. A property definition with the name "*" can be used
 to define the type for additional parameters (in the case of variable 
parameters). Note: If objects as params is accepted as a valid value for
 JSON-RPC, this can be an object/schema as well, with property 
definitions for each property in the object.</td>
</tr>
<tr><td>required</td>
<td>Specifically indicates whether the method MUST return a value. This is false by default.</td>
</tr>
<tr><td>nullable</td>
<td>This indicates whether the return value may be a null. This is false by default.</td>
</tr>
<tr><td>minimum</td>
<td>This indicates the minimum value for the return value when the type 
of the value is a number, or it indicates the minimum number of values 
in an array when an array is the return value.</td>
</tr>
<tr><td>maximum</td>
<td>This indicates the maximum value for the return value when the type 
of the value is a number, or it indicates the maximum number of values 
in an array when an array is the return value.</td>
</tr>
<tr><td>pattern</td>
<td>When the return value is a string, this provides a regular 
expression that the return string value must match. Regular expressions 
should follow the regular expression specification from ECMA 262/Perl 5.</td>
</tr>
<tr><td>length</td>
<td>When the return value is a string, this indicates maximum length of the string.</td>
</tr>
<tr><td>options</td>
<td>This provides an enumeration of possible values that are valid for the return value.</td>
</tr>
<tr><td>unconstrained</td>
<td>When used in conjunction with the options property, this indicates a
 return value can be used that is not in the list of options. This has 
no meaning when the options property is not a sibling.</td>
</tr>
<tr><td>description</td>
<td>This provides a description of the purpose the method. The value should be a string. <tt class="docutils literal"><span class="pre">"description":{"My</span> method"}</tt></td>
</tr>
<tr><td>format</td>
<td><p class="first">This indicates what format the data is among some predefined formats which may include:</p>
<ul class="simple">
<li>date - a string following the ISO format</li>
<li>address</li>
<li>schema - a schema definition object</li>
<li>person</li>
<li>page</li>
<li>html - a string representing HTML</li>
</ul>
<p class="last"><em>Need to provide definitions for these formats, will be covered in another spec.</em></p>
</td>
</tr>
</tbody>
</table>
<p>In addition a service descriptor should contain the id and 
description properties, and may contain the version property as defined 
here:</p>
<table class="docutils">
<colgroup>
<col width="8%">
<col width="92%">
</colgroup>
<thead valign="bottom">
<tr><th class="head">Property</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>id</td>
<td>A unique identifier for the service. When possible, the id should 
represent the URL from the which service descriptor can be accessed 
(relative URLs are acceptable).</td>
</tr>
<tr><td>description</td>
<td>This a description of the service.</td>
</tr>
<tr><td>version</td>
<td>This is the version of the service.</td>
</tr>
</tbody>
</table>
<p>A service descriptor could look like (each top level property defines an
available method/procedure):</p>
<pre class="literal-block">{"divide": {
   "description":"Divide one number by another",
   "type":"method",
   "returns":"number",
   "params":[{"type":"number","name":"dividend","required":true},
             {"type":"number","name":"divisor","required":true}]
   },
 "sqrt": {
   "description":"Find the square root of a number",
   "type":"method",
   "returns":"number",
   "params":[{"type":"number","name":"square","required":true,
              "minimum":0,"description":"Number to find the square root of"}]
   },
 "sqrtComplex": {
   "description":"Find the square root of a number including negative numbers",
   "type":"method",
   "returns":["number", {"realPart":{"type":"number"},
                        "imaginaryPart":{"type":"number"}}],
   "params":[{"type":"number","name":"square","required":true,
              "description":"Number to find the square root of"}]
   },
 "sum": {
   "description":"Find the sum of the parameters",
   "type":"method",
   "returns":"number",
   "params":[{"type":"number","name":"*",
              "description":"Number to include in the sum"}]
   },
 "id":"http://math.com/mathMethods.schema"
 ,"description":"Some math methods. Strings as property/method definitions are ignored by JSON Schema validators, but this property can be used for a description."
 }
</pre>
<p>Here you can see that we are utilizing various JSON Schema definitions such as
union types (allowing for a "number" or a complex number object to be returned),
and object definitions (complex number definition) in the type definitions.</p>
<div class="section" id="mixing-rpcs-and-object-data">
<h2>Mixing RPCs and Object Data</h2>
<p>By utilizing JSON Schema, a schema can provide information about a JSON source
without any assumptions about whether it provides RPCs or direct object access
(REST when using HTTP) or both. For example if there was a schema for the URL
<tt class="docutils literal"><span class="pre">http://www.myfriends.com/jim</span></tt>:</p>
<pre class="literal-block">{"firstName":{"type":"string"},
 "lastName":{"type":"string"},
 "friends":{"type":{"items":{"firstName":{"type":"string"},
                             "lastName":{"type":"string"}}},
 "addFriend:
  {"type":"method",
   "description":"Adds a friend to this person"},
   "params":[{"firstName":{"type":"string"},
              "lastName":{"type":"string"}]
  },
 "id":"http://friends.com/friend.schema"
}
</pre>
<p>In this example, the schema defines methods that can be called (using JSON-RPC)
on this object (<tt class="docutils literal"><span class="pre">http://www.myfriends.com/john</span></tt>) as well as properties that
should be expected from this object/url. That is the object properties might
look something like this (on HTTP what would be returned by GET, but no
protocol needs to be assumed):</p>
<pre class="literal-block">{"firstName":"John","lastName":"Doe","friends":[]}
</pre>
<p>Note that this example could be more DRY by using a <a class="reference external" href="http://www.json.com/2007/10/19/json-referencing-proposal-and-library/">JSON Referencing</a> scheme
to define a person definition, and reusing that definition for the friends
array and the parameter definition, but this is not necessary.</p>
</div>
</div>
 
<hr><p><small><a href="http://www.simple-is-better.org/json-rpc/jsonrpc20-schema-service-descriptor.txt">View document source</a>.</small></p>

</div>

<p><a href="http://www.simple-is-better.org/json-rpc/webmaster%28at%29simple-is-better%28dot%29org">webmaster(at)simple-is-better(dot)org</a>

</p>
<p id="footer_img">
<a href="http://www.anybrowser.org/campaign/"><img src="simple%20is%20better%20-%20JSON-RPC%202.0%20DRAFT%20%20Schema%20Service%20Descriptor_files/anybrowser2.png" alt="best viewed with any browser" height="31" width="88"></a>
<a href="http://validator.w3.org/"><img src="simple%20is%20better%20-%20JSON-RPC%202.0%20DRAFT%20%20Schema%20Service%20Descriptor_files/valid-html401.png" alt="Valid HTML 4.01 Transitional" border="0" height="31" width="88"></a>
<a href="http://www.wirspeichernnicht.de/content/view/10/22/"><img src="simple%20is%20better%20-%20JSON-RPC%202.0%20DRAFT%20%20Schema%20Service%20Descriptor_files/wirspeichernnichtsiegel.png" alt="Wir speichern nicht - Weitere Informationen hier..." title="Wir speichern nicht - Weitere Informationen hier..." border="0" height="113" width="109"></a>
</p>




</body></html>